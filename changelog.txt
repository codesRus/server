Changelog:

5-25-16 9:33pm:
	TODO: Still need to refactor the database functions!
	
	Added functions for counter-based OTP:
		Added the gen_hotp() function to the getOTP module's OTP class. The function
		takes in a count to generate a counter-based OTP, which it returns.
		In the Server, I added the following function:
			- generate_HOTP_code(): Creats a OTP object which it uses to pass the value of 
			a global variable "cnt" (for "counter") to obtain the HOTP code, then it
			increments "cnt" by one and returns the HOTP value to be sent via SMS or email.
			Incrementing the counter ensures that the same OTP code will be different.
			
			Note that prior to incrementing "cnt" it makes sure its current value does not
			exceed sys.maxsize (largest integer value on the current system), which, though
			unlikely to happen, is still a risk. Better safe than sorry. :)
	
	Refactoring galore:
		Started refactoring and shaved off quite a few lines in addition to removing quite
		a bit of repetition.
		The biggest refactoring took places in handle_POST(), which had ballooned to several
		screen-lengths of code after implementing the /register, /verify, /login, /success,
		and /failure request handling. 
		I created sub-functions for each:
			handle_register_request()
			handle_verify_request()
			handle_login_request()
			handle_success_request()
			handle_failure_request()
		which allowed me to pull out the common calls to get_stream_data() and json.loads(),
		and have a single call in handle_POST, rather than calling both functions 5 times! 
		Now each handle_xxx_request() function takes in a jdata object (i.e. the result of 
		json.loads(), which can more easily be manipulated) and uses it to obtain the 
		username, token or other required data from it. 
		
		I feel as though the db_validate() calls in each function can be combined as well,
		but since they do have minor differences, I'll handle it tomorrow (or later on).
		
		The database functions will be my next priority because... YUCK!
	
	Improved resilience:
		Included a few try/except blocks in places that would presumably need them to avoid
		crashes. For example, if a POST were sent without data, all hell would break loose,
		but this was remedied by putting the get_stream_data() and json.loads() in 
		handle_POST() in their individual try/except blocks. Tested and it helps. 
		I put some in a couple of other places but can't immediately recall. Oops.
	

5-24-16 6:21pm:
	Major update:
		- Implemented sending the OTP via SMS using Twilio, since email takes a couple of
		seconds, which bothers my soul.
			To install Twilio in your virtual environment:
				pip install twilio
				
			The website: https://www.twilio.com/
		
		- I included a "phone" entry into the database too to accommodate the extra
			functionality. 
			This was done with:
			
			ALTER TABLE Users ADD COLUMN VARCHAR(12) AFTER email;
		
		Server includes the sendSMS module, which sets the Twilio account id, token, and
		Twilio phone number that are used to send the messages. The sendSMS module has a
		send_SMS class and a single function send() that takes in a phone number and OTP
		and sends the OTP to the provided number.
		This was accomplished with the addition of the following functions to the Server:
			- db_get_user_phone(): Takes a user id_token and queries the database for the
				user's phone number which it returns.
			- get_phone(): Takes a JSON, extracts the user id_token and calls 
				db_get_user_phone(), returns the phone number.
			- send_sms(): Takes a JSON, creates an sendSMS instance, calls get_phone() to
				to obtain phone number, calls generate_OTP_code() to obtain the OTP, and
				uses the sendSMS object to call its send() function with the phone number
				and OTP.
		Works better (read 'faster') than email, which is important since the OTP is 
		time-sensitive. 
		My  Twilio account is a trial version, so I'm not sure if I have a limit on the
		number of texts I can send, so using it sparingly (it's commented out by default).		

5-23-16 8:57pm:
	TODO: Combine all database functions into one, where each query is ran depending
		on the result required! This will shave off quite a few lines of code and 
		make it cleaner and much easier to follow!

	I am hesitant to upload the code to the droplet because many of the emails currently
	in our database have bogus email. So if one of my team-mates decided to POST a
	/login request for one of those users, this won't work very well. I will add my own
	email to the database though, so that can be tested with. Oh joy! I already have 20+
	email just from testing this while implementing the email & OTP functionality. :)
	
	Major update:
		- Generating one-time-password (OTP) via PyOTP (elaboration below).
		- Sending emails with the OTP to "unverified" users (elaboration below).
		- Created several new helper functions to assist in implementing the above
		functionality. Those include:
			- get_email(): takes in a user's id_token and calls db_get_user_email() to
				obtain the user's email address, which it returns.
			- db_get_user_email(): takes in the id_token and queries the database for 
				the user's email which it returns
			- db_get_user_dev_token(): takes in the id_token and queries the database
				for the user's dev_token, which it returns.
			- send_email(): takes in id_token, uses it to get the user's email, calls 
				generate_OTP_code and sends an email to the user with that one-time-pass.
				NOTE that while this works, it is time-sensitive, so it may not always be
				very effective.
			- generate_OTP_code(): takes no input and generates a one-time-password to email
				to the unverified user.
			- generate_OTP_prov(): takes in a user's email and calls getOTP to generate
				a one-time-pass URI that can be sent to Client to generate OTP or QR codes.
				Note that this isn't really required, as the Client could very well generate
				those by simply using the secret phrase.

	On generating OTPs:
		This was implemented with PyOTP in a separate class, contained in getOTP.py.
		getOTP has two functions:
			- gen_code(): generates the OTP from the secret phrase and returns it.
			- gen_prov(): takes in an email and generates a provisioned URI containing
				the email and secret that can then be used to create QR codes.
				Note that it returns both the email and secret. They are encrypted by
				virtue of using TLS when POST-ing. I'm assuming we won't be storing the
				secret phrase on the Client's side, which is why it's being sent. We 
				should discuss possible security issues though!
		So when the server receives a call with /login from Client and the user
		identified by the id_token that is sent over has NOT been previousy verified,
		i.e. their dev_token is empty, then we generate the OTP, email it to the user's
		email and POST to Client with the uri and id_token.
	
	On sending emails:
		This was implemented with Python's standard smtplib in a separate class,
		contained in sendEmail().py.
		The class send_Email initializes login and password for the sender's email
		(twoefay@gmail.com, which I created specifically for this purpose). 
		
		!!Note that the password for the email is stored in the script, which I 
		absolutely hate but the alternatives were not practical:
			- prompt me for the password when sending email (Pffft...)
			- store password in the python keyring, which then prompts me for the
			keyring password before sending an email... no better than before.
		This means the droplet has to be air-tight!! Hardening with Iptables, ssh-key 
		access only should be required for any remote logins to prevent tampering.

		The send_Email class has one function, send().
		send() takes in an email address and message params, where the message is the
		one-time-password to be sent to the provided email.
		

5-21-16 9:51pm:
	Major update:
		- Renamed /update to /verify and changed the underlying implementation of it, which
		also necessitated the creation of db_validate_token() and db_update_token.
		- Implemented /login, /success, and /failure POST requests (will elaborate below).
		- Implementation of the above requests necessitated changes to the database, so
		I made a few significant changes (will elaborate below).
		- Minor cleaning up but A LOT MORE is needed as currently the /success and /failure
		requests use practically identical code but I have different print statements in
		each that I use to monitor their success, so combining them into one will happen
		soon.

	On the implementation of /verify:
		The /verify POST request is the finishing step of user verification. First, the
		user registers with the Client site, which sends a /register POST to the Server,
		which, saves the provided username and email:
			{'username':'<username>','email':'<email>'}
		The server generates a random id_token and POSTs it back to the Client with a 
		/register POST containing the username and id_token:
			{'username':'<username>','id_token':'<id_token>'} 
		The Client displays the id_token to the user. 
		The user installs the App and enters the id_token to verify his identity. 
		The App sends the /verify POST request to the Server which contains a JSON with the 
		id_token AND the dev_token (device token of the phone):
			{'id_token':'<id_token>','dev_token':'<dev_token>'} 
		The Server then stores the dev_token in the database and thus the circle is complete.
		Now the Server can use the dev_token to send notifications to the user's phone via POST
		requests to the APN. 
	
	On the implementation of /login, /success, and /failure:
		After the above "circle" is complete, the user must then authenticate upon login into
		the Client site.
		When the user logs in, the Client sends the Server a /login POST request with the
		id_token:
			{'id_token':'<id_token>'}
		The Server looks up the dev_token and sends a POST request to APN to generate
		a notification to the user's phone. 
		The user authenticates (or fails to do so) and the App sends a POST to the Server 
		with /success or /failure and a JSON with the id_token:
			{'id_token':'<id_token>'}
		The Server in turn sends a POST to the Client with a JSON containing the id_token and a
		login success/failure field, that is:
			{'id_token':'<id_token>','login':'success'}
		or
			{'id_token':'<id_token>','login':'failure'}
	
	On the database changes:
		Now, the database was altered to have an additional column for the dev_token.
		Since the Server must be able to locate a user by id_token, I also had to make
		id_token a primary key (up until now only username was a key).
		
		How I made the changes on Chris's droplet:
		
		mysql> select * from Users;
		+-----------+--------------------+----------------------+
		| username  | email              | id_token             |
		+-----------+--------------------+----------------------+
		| bro       | bro@email.com      | 76545246587232       |
		| isThisOn? | blsssa@example.com | 3IYsBH6wDEyVCZfn     |
		| sexy      | sexy@email.com     | 23472                |
		| something | bla@example.com    | 234h38fKW0dje238E    |
		| tester    | tester@email.com   | 4535343              |
		| testuser  | test@email.com     | 23598745434943758438 |
		+-----------+--------------------+----------------------+
		6 rows in set (0.00 sec)

		mysql> ALTER TABLE Users ADD dev_token VARCHAR(80) AFTER id_token;
		Query OK, 0 rows affected (0.08 sec)
		Records: 0  Duplicates: 0  Warnings: 0

		mysql> select * from Users;
		+-----------+--------------------+----------------------+-----------+
		| username  | email              | id_token             | dev_token |
		+-----------+--------------------+----------------------+-----------+
		| bro       | bro@email.com      | 76545246587232       | NULL      |
		| isThisOn? | blsssa@example.com | 3IYsBH6wDEyVCZfn     | NULL      |
		| sexy      | sexy@email.com     | 23472                | NULL      |
		| something | bla@example.com    | 234h38fKW0dje238E    | NULL      |
		| tester    | tester@email.com   | 4535343              | NULL      |
		| testuser  | test@email.com     | 23598745434943758438 | NULL      |
		+-----------+--------------------+----------------------+-----------+
		6 rows in set (0.00 sec)

		mysql> SHOW INDEX FROM cs130.Users;
		+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
		| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
		+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
		| Users |          0 | PRIMARY  |            1 | username    | A         |           6 |     NULL | NULL   |      | BTREE      |         |               |
		| Users |          0 | username |            1 | username    | A         |           6 |     NULL | NULL   |      | BTREE      |         |               |
		| Users |          0 | email    |            1 | email       | A         |           6 |     NULL | NULL   |      | BTREE      |         |               |
		+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
		3 rows in set (0.00 sec)

		mysql> ALTER TABLE Users DROP PRIMARY KEY, ADD PRIMARY KEY(username, id_token);
		Query OK, 6 rows affected (0.04 sec)
		Records: 6  Duplicates: 0  Warnings: 0

		mysql> SHOW INDEX FROM cs130.Users;
		+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
		| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
		+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
		| Users |          0 | PRIMARY  |            1 | username    | A         |           6 |     NULL | NULL   |      | BTREE      |         |               |
		| Users |          0 | PRIMARY  |            2 | id_token    | A         |           6 |     NULL | NULL   |      | BTREE      |         |               |
		| Users |          0 | username |            1 | username    | A         |           6 |     NULL | NULL   |      | BTREE      |         |               |
		| Users |          0 | email    |            1 | email       | A         |           6 |     NULL | NULL   |      | BTREE      |         |               |
		+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
		4 rows in set (0.00 sec)		
	
	
5-20-16 11:10pm:
	OK, I just got to San Diego and went to work on the Server, got annoyed that my cURL
	requests weren't going through properly because of remnants of the commented-out
	<encrypted string> code, so I commented out stuff further to simplify life.
	At this stage in the game, it doesn't even look like we'll be using this extra safety
	funtionality at all, so I won't suffer through testing it excessively.


5-19-16 11:27pm:
	Note: I've temporarily commented out trigger_verification() because testing is a major
		hassle. 
	
	Update:
		- Added gen_token() that generates a random string with letters and numbers.
		It uses all letters, upper and lower case, for extra awesomeness!
		- "Converted" send_POST() to send an HTTP/2.0 POST request, rather than the 
		previously HTTP/1.1 mostly for consistency -- back to full-on HTTP/2.0!
		- It seems different members of our team have different ideas about the way
		in which the Client, Server, and App should interact, so I'm in the process of
		changing things. To that effect, the following will likely happen:
			- I've converted the handle_GET() to call the send_POST() method when a
			request arrives with valid username. The POST will/should be sent to the
			APN but currently I'm just sending it to http2bin.org because they've
			set it up to return the request they received and I can thus verify that I'm
			sending the right stuff.
			- In the response to the GET request I'm not returning only the token of
			the specified user, since returning the username is pointless.
			- I will have to remove the extra POST functionality I had originally 
			started implementing, such as the /login, /success, /failure because we won't
			be using it. This is fine, I suppose.
			
		The new idea is as follows:
			- Client sends POST to Server to register new user. 
			- Server calls APN and returns the random token.
			- APN notifies user.
			- User accepts and the App sends a POST directly to the Client ? to inform of
			successful login.
			- Client should wait some time and if App does not respond it will forbid 
			login to the site.
			
		Makes sense. We'll see what happens.

5-18-16 9:41pm:
	NOTE: I haven't yet pushed this version to the droplet, will probably do it tomorrow
		so that I can more thoroughly test it up there (due to the secret functionality
		described below) to avoid making everyone's life harder.

	Major update:
		- Added a crypt.py module to perform AES encryption/decryption of strings
		which I decided to use in encrypting the current date on the system.
		The idea is as follows:
			The sender of the request will add the encrypted date with the path,
			for example GET https://<server url>:8080/user/<username>/<encrypted string>.
			When the Server receives the request, it encrypts the string and checks whether
			the date parameters are current (compares to current date).
			
			This accomplishes two thnigs:
				- verifies that the requestor is legitimate, i.e. the reqeust is coming from 
				either the Client or from the App.
				
				- makes the request time-sensitive, which guards against replay-attacks and
				imposter requests.
			Whether it is the best way to add and additional layer of security, I do not know
			but at this time I think it's a decent idea.
			
			Possible issues:
				- the Client and/or app are in different time-zones, which will clearly makes
				this more of a hassle and require a possible addition to the database with the
				time-zone (or similarly silly solution).
				
				For our purposes, however, and in this stage, this won't be an issue.
				- added more dependencies to the Server, which isn't that great as some of
				these will have to also transfer over to the Client and App...
			
				- makes testing a pain in the a** since I'm currently sending requests with
				cURL. I've commented out the minutes and seconds comparisons to alleviate
				the extreme pain. :)
			
		- Cleaned up various aspects of the functionality, in particular the request 
		verification. Split a couple of functions up and created a couple of new ones, all 
		pretty self-explanatory but I'll discuss them below.
		
		- New functions include:
			- validate_params() to perform the path validation by request method. It will
			call the functions validating the encrypted message as well.
			- triggerr_secret_validation() to call the function that validates the username,
			since this was previously done in separate places -- not sexy.
			- validate_sender() to perform the secret decryption and comparison, thus making
			sure the sender is indeed a good guy.
			- validate_decrypted_msg() to avoid crashes if someone tries to inject a secret
			that is of the wrong format, very important stuff!
			
		- Added comments to make it easier for other to understand how things work... is
		anyone even reading this? :/ No one seems interested in contributing to the Server, 
		so perhaps the comments are useless for others. At least it will allow me to better
		keep track of what I did if I decide to return to this code down the line.
			

5-17-16 10:43pm:
	The flow is as follows:
		- Request comes in which calls the dataReceived() functnion to
		distribute the labor accordingly. 
		- It first calls requestReceived() to:
		- verify that the method is valid (i.e. GET or POST)
		- verify that the path provided is not empty (i.e. https://url/)
		- get the request data
		- check whether method is GET or POST
		- if it's a GET request (for example, the GET request https://url/user/bro
		returns the username and token for user "bro"), we call handle_GET() function, 
		which checks whether the username exists in the database (using db_verify()). 
		- if username is not in the database, it returns a None and so we return 404.
		- if username is in the database, we return a JSON of the form:
			'{"username":"bro","token":"44353"}'
			
		- if it's a POST request:
			- we call validate_POST to ensure the path is of the allowed
			(/register, /update, /login, /success, /failure)
		- POST requests contain data, so the Server calls dataFrameReceived next
		- there we call handle_POST() to process the request data
			- handle /register, /update, /login/, /success, or /failure accordingly
			- we extract the data from the request JSON
			- for /register and /update we verify the username
			- get or update token from database
			- create JSON for response
		- finally the server calls streamComplete() to send out the chosen 
		request and data
		- end the stream
		
		Note that database access is accomplished through the functions:
		- db_open() to connecto to the database - returns a file handle "db" and
		a "cursor" for running queries on the database
		- db_close() closes the database
		- db_verify() to verify username is or isn't in the database (for POST/GET)
		- db_get() pulls the token for a specified username from the database
		- db_set() registers specified users's info in the database
		- db_update() updates specified user's token in the database
		
		Other helper functions include:
		- errorFound() which sets the "error" flag to eventually return 404 status.
		- return_200() which returns the 200 status.
		- return_XXX() which does the actual return of 404 and 405 statuses.
		

5-17-16 10:34pm:
	We only allow POST and GET requests by checking from the very start what
	the method in the POST header is. If it's anything other than a GET/POST,
	we return a 405 status.

	The server does basic database checks for /register and /update POST request,
	by running the following query prior to attempting to add/update the user
	record:
		SELECT username, COUNT(*) FROM Users WHERE username=<provided username>
	
	The logic behind this is that if the user already exists, then we shouldn't
	be able to register him/her again. Similarly, if the user does not exist,
	then updating his/her token should not be possible.
	
	We check whether the query above returns None. If so, then we raise a
	flag "error" which is used to skip making the change and just returns
	a 404.
	

5-17-16 9:25pm: 
	I should've started this a long time ago but... better late than never.
	Currently, the following has been implemented.
	Hyper Python Server accepting GET and POST requests over HTTP/2.0.
	
	The idea (as I understand it) is as follows:
	
	1. Client -> Server: register user
	When a user first registers on the Client site, we should send a POST 
	request to register the user on the Server as well.
	This is done by sending a POST request with:
		- JSON with the username, email, and token (the token is empty at first)
		- The URL path ends with /register to signify intent to register user

    Example:
	curl --http2 -X POST -d '{"username":"tester", "email":"tester@email.com","token":""}' https://<server address>/register
	
	Perhaps here it would be appropriate for the Server to return some 
	unique token to the Client so when the user installs the iPhone App,
	we can then identify the user via that token.
	
	2. User installs App
	The user installs the iPhone App and logs in (possibly using the unique token
	to verify the user is valid).
	
	3. App -> Server
	The App may need to contact the Server once to verify registration.
	
	4. Server -> APN
	Once registration is verified, the Server should contact the APN to
	generate a unique token.
	
	5. APN -> App -> Server
	The APN will push a notification to the App with the unique token, which
	then must be POST-ed to the Server with the /update path.
	
	Example:
	curl --http2 -X POST -d '{"username":"tester", "email":"tester@email.com","token":"4535675234"}' https://<server address>/update
	
	6. Setup complete.
	
	7. Client -> Server -> APN -> App -> Server -> Client
	Now that initialization has been completed, the user can log into the Client site.
	The Client side sends a POST request to the server, requesting login verification
	with the /login path.
	
	Example:
	curl --http2 -X POST -d '{"username":"tester"}' https://<server address>/login
	
	The Server contacts APN with the saved token to push a notification to the App.
	The user authenticates on the App.
	The App sends a POST request to the server with the path /success or /failure.
	
	Example:
	curl --http2 -X POST -d '{"username":"tester"}' https://<server address>/success
	
	The Server then sends a POST request to the Client notifying it of successful or
	failed login. 
	The Client allows the user in or prevents the user from loggin in, accordingly.
	
	The Server here implements (to some extent) 1, 5, and 7. It may need tweaking
	the permitted JSON but that should be fairly straight forward.
	I've setup the database on the droplet as follows:
	
	database name: cs130
	table name: Users
	Contents:
	+----------+-----------------+----------+
	| username | email           | id_token |
	+----------+-----------------+----------+
	| bro      | bro@email.com   | 34984398 |
	| ...      | ...             | ...      |
	+----------+-----------------+----------+
	
	So 
	- POST with path /register and JSON with username, email, and token (blank) will
	add a new user to the database.
	- POST will path /update and a JSON with username, email, and token (not blank) will
	update the database for that user with the new token.
	- POST with /login is NOT YET IMPLEMENTED.
	- POST with /success or /failure will send a POST to the Client by passing on a JSON
	with '{"username":"<username here>", "login":"success"}' or "login":"failure",
	respectively, to the Client. I'm currently just sending that POST and JSON to 
	https://httpbin.org/post for testing.
	
	
	